name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    environment: firebaseSecrets
    steps:
    - uses: actions/checkout@v3
    - name: Create .env from GitHub Secrets
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
        echo "PORT=3000" >> .env
        echo "FB_TYPE=service_account" >> .env
        echo "FB_PROJECT_ID=${{ secrets.FB_PROJECT_ID }}" >> .env
        echo "FB_PRIVATE_KEY_ID=${{ secrets.FB_PRIVATE_KEY_ID }}" >> .env
        echo "FB_PRIVATE_KEY=\"${{ secrets.FB_PRIVATE_KEY }}\"" >> .env
        echo "FB_CLIENT_EMAIL=${{ secrets.FB_CLIENT_EMAIL }}" >> .env
        echo "FB_CLIENT_ID=${{ secrets.FB_CLIENT_ID }}" >> .env
        echo "FB_AUTH_URI=${{ secrets.FB_AUTH_URI }}" >> .env
        echo "FB_TOKEN_URI=${{ secrets.FB_TOKEN_URI }}" >> .env
        echo "FB_AUTH_PROVIDER_CERT_URL=${{ secrets.FB_AUTH_PROVIDER_CERT_URL }}" >> .env
        echo "FB_CLIENT_CERT_URL=${{ secrets.FB_CLIENT_CERT_URL }}" >> .env
        echo "FB_UNIVERSE_DOMAIN=${{ secrets.FB_UNIVERSE_DOMAIN }}" >> .env

        echo "NODE_ENV=development" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRES_IN=24h" >> .env

        echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" >> .env
        echo "LOG_LEVEL=info" >> .env

    - name: Build Docker image
      run: docker build -t ai-taskpilot-api .
    - name: Test Docker image
      run: |
        docker run -d -p 3000:3000 --env-file .env --name test-container ai-taskpilot-api
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
